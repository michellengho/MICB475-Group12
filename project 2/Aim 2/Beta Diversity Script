BETA Diversity R

library(phyloseq)
library(ape)
library(tidyverse)
library(vegan)
library(ggplot2)

metapd <- "ryan_metadata_new.tsv"
meta <- read_delim(metapd, delim = "\t")

otuFP <- "feature-table.txt"
otu <- read_delim(file = otuFP, delim="\t", skip=1)

tax <- "taxonomy.tsv"
taxonomy <- read_delim(tax, delim = "\t")

rooted_tree <- "tree.nwk"
rt <- read.tree(rooted_tree)

## Making the Phyloseq object

#Formatting OTU Table
otu_mat <- as.matrix(otu[,-1])
rownames(otu_mat) <- otu$`#OTU ID`
OTU <- otu_table(otu_mat, taxa_are_rows = TRUE)
class(OTU)

#Formatting Metadata
samp_df <- as.data.frame(meta[,-1])
rownames(samp_df)<- meta$'sample-id'
SAMP <- sample_data(samp_df)
class(SAMP)

#Formatting taxonomy
tax_mat <- taxonomy %>% select(-Confidence)%>%
  separate(col=Taxon, sep="; "
           , into = c("Domain","Phylum","Class","Order","Family","Genus","Species")) %>%
  as.matrix()


tax_mat <- tax_mat[,-1]
rownames(tax_mat) <- taxonomy$`Feature ID`
TAX <- tax_table(tax_mat)
class(TAX)

# Create phyloseq object
ryan_beta <- phyloseq(OTU, SAMP, TAX, rt)

# Remove non-bacterial sequences
ryan_filt <- subset_taxa(ryan_beta, Domain == "d__Bacteria" & Class!="c__Chloroplast" & Family !="f__Mitochondria")
# Remove ASVs that have less than 5 counts total
ryan_filt_nolow <- filter_taxa(ryan_filt, function(x) sum(x)>5, prune = TRUE)
# Remove samples with less than 100 reads
ryan_final <- prune_samples(sample_sums(ryan_filt_nolow)>100, ryan_filt_nolow)

otu_table(ryan_final)
sample_data(ryan_final)
tax_table(ryan_final)
phy_tree(ryan_final)

# Rarefy samples
rarecurve(t(as.data.frame(otu_table(ryan_final))), cex=0.1)
ryan_final_rarefied <- rarefy_even_depth(ryan_final, rngseed = 1, sample.size = 70)

# Saving
save(ryan_final, file="ryan_final.RData")
save(ryan_final_rarefied, file="ryan_final_rarefied,.RData")

ryan_final_rarefied

library(picante)

getwd()

# Load data
load("ryan_final_rarefied,.RData")
load("ryan_final.RData")

unifrac_unweighted <- distance(ryan_final_rarefied, method="UniFrac", weighted = FALSE)
unifrac_weighted <- distance(ryan_final_rarefied, method="UniFrac", weighted = TRUE)
bray_curtis_dist <- distance(ryan_final_rarefied, method = "bray")


#Subset the data to only contain information for aim2 BETA diversity

filtered_data <- subset_samples(
  ryan_final_rarefied,
  !is.na(Smoking_status) &              	# Remove samples with NA in Smoking_status
    !is.na(combined_condition) &          	# Remove samples with NA in combined_condition
    combined_condition %in% c("Crohn's Disease/Non-smoker",
                              "Crohn's Disease/Smoker",
                              "Ulcerative Colitis/Non-smoker",
                              "Ulcerative Colitis/Smoker")
)


pcoa_bc_filtered <- ordinate(filtered_data, method = "PCoA", distance = "bray")
pcoa_uw_filtered <- ordinate(filtered_data, method = "PCoA", distance = 
                               pcoa_w_filtered <- ordinate(filtered_data, method = "PCoA", distance = "unifrac_weighted")
                             
#Facet the graphs based on smoking condition and including the 95% confidence ellipse
                             
                             
# Add a new variable to categorize based on smoking status
filtered_data@sam_data$smoking_group <- ifelse(grepl("Smoker", filtered_data@sam_data$combined_condition),
                                               "Smoker", "Non-smoker")

# Perform PCoA analysis
pcoa_bc_filtered <- ordinate(filtered_data, method = "PCoA", distance = "bray")

# Create the plot with facets based on smoking status
gg_pcoa_bc_facet <- plot_ordination(
  filtered_data,
  pcoa_bc_filtered,
  color = "combined_condition"
) +
  geom_point(size = 1) +  # Adjust point size for visibility
  stat_ellipse(aes(group = combined_condition), level = 0.95) +  # Add 95% confidence ellipses
  facet_wrap(~ smoking_group) +  # Facet by the new smoking status group
  labs(
    color = "Condition",
    title = "PCoA Bray-Curtis by Smoking Status"
  ) +
  theme_minimal() +
  theme(strip.text = element_text(size = 10))  # Adjust facet label size for readability

# Display the plot
gg_pcoa_bc_facet

ggsave("plot_pcoa_bc_facet.png"
       , gg_pcoa_w_facet
       , height=6, width=8)

#Unweighted Unifrac

# Perform PCoA analysis
pcoa_uw_filtered <- ordinate(filtered_data, method = "PCoA", distance = "unifrac_unweighted")

# Create the plot with facets based on smoking status
gg_pcoa_uw_facet <- plot_ordination(
  filtered_data,
  pcoa_uw_filtered,
  color = "combined_condition"
) +
  geom_point(size = 1) +  # Adjust point size for visibility
  stat_ellipse(aes(group = combined_condition), level = 0.95) +  # Add 95% confidence ellipses
  facet_wrap(~ smoking_group) +  # Facet by the smoking status group
  labs(
    color = "Condition",
    title = "PCoA Unweighted UniFrac by Smoking Status"
  ) +
  theme_minimal() +
  theme(
    strip.text = element_text(size = 10),  # Adjust facet label size for readability
    panel.border = element_rect(colour = "black", fill = NA, size = 1),  # Add border around each facet
    panel.spacing = unit(1, "lines")  # Increase spacing between facets for clarity
  )


# Display the plot
gg_pcoa_uw_facet

ggsave("plot_pcoa_uw_facet.png"
       , gg_pcoa_uw_facet
       , height=6, width=8)

#Weighted Unifrac

# Perform PCoA analysis
pcoa_w_filtered <- ordinate(filtered_data, method = "PCoA", distance = "unifrac_weighted")

# Create the plot with facets based on smoking status
gg_pcoa_w_facet <- plot_ordination(
  filtered_data,
  pcoa_w_filtered,
  color = "combined_condition"
) +
  geom_point(size = 1) +  # Adjust point size for visibility
  stat_ellipse(aes(group = combined_condition), level = 0.95) +  # Add 95% confidence ellipses
  facet_wrap(~ smoking_group) +  # Facet by the new smoking status group
  labs(
    color = "Condition",
    title = "PCoA Weighted UniFrac by Smoking Status"
  ) +
  theme_minimal() +
  theme(strip.text = element_text(size = 10))  # Adjust facet label size for readability



# Display the plot
gg_pcoa_w_facet

ggsave("plot_pcoa_w_facet.png"
       , gg_pcoa_w_facet
       , height=6, width=8)





# Bray-Curtis PERMANOVA

colnames(sample_data(filtered_data))  # List metadata columns to verify names

filtered_data_permanova <- subset_samples(
  filtered_data,
  !is.na(Smoking_status) & !is.na(combined_condition)
)

metadata_df <- as(sample_data(filtered_data_permanova), "data.frame")

# Calculate Bray-Curtis distance
bray_curtis_dist <- phyloseq::distance(filtered_data, method = "bray")


adonis2_bc <- adonis2(
  bray_curtis_dist ~ Smoking_status + combined_condition,
  data = metadata_df,
  permutations = 999
)

# Display results
print(adonis2_bc)




# Unweighted UniFrac PERMANOVA

all(rownames(unifrac_unweighted) %in% rownames(metadata_df))

any(is.na(unifrac_unweighted))

min(unifrac_unweighted)

class(unifrac_unweighted)  # Should return "dist"

dim(unifrac_unweighted)
dim(metadata_df)

unifrac_unweighted_matrix <- as.matrix(unifrac_unweighted)

common_samples <- intersect(rownames(unifrac_unweighted_matrix), rownames(metadata_df))
unifrac_unweighted_matrix <- unifrac_unweighted_matrix[common_samples, common_samples]
metadata_df <- metadata_df[common_samples, , drop = FALSE]

adonis2_uw <- adonis2(
  as.dist(unifrac_unweighted_matrix) ~ Smoking_status + combined_condition,
  data = metadata_df,
  permutations = 999
)

# Display results
print(adonis2_uw)

#UW Unifrac pairwise

# Ensure consistent sample IDs between the distance matrix and metadata
common_samples <- intersect(rownames(unifrac_unweighted_matrix), rownames(metadata_df))
unifrac_unweighted_matrix <- unifrac_unweighted_matrix[common_samples, common_samples]
metadata_df <- metadata_df[common_samples, , drop = FALSE]

# Convert the matrix to a distance object
unifrac_unweighted_dist <- as.dist(unifrac_unweighted_matrix)

# Perform pairwise PERMANOVA for 'combined_condition'

pairwise_uw_results <- pairwise.adonis2(
  unifrac_unweighted_dist ~ combined_condition,
  data = metadata_df,
  permutations = 999
)

# Display pairwise results
print(pairwise_uw_results)

pairwise_bc_results <- pairwise.adonis2(
  bray_curtis_dist ~ combined_condition,
  data = metadata_df,
  permutations = 999
)

# Display pairwise results
print(pairwise_bc_results)

pairwise_w_results <- pairwise.adonis2(
 unifrac_weighted ~ combined_condition,
  data = metadata_df,
  permutations = 999
)

# Display pairwise results
print(pairwise_w_results)



# Weighted UniFrac PERMANOVA

class(unifrac_weighted)  # Should return "dist"

dim(unifrac_weighted)
dim(metadata_df)

unifrac_weighted_matrix <- as.matrix(unifrac_weighted)

common_samples <- intersect(rownames(unifrac_weighted_matrix), rownames(metadata_df))
unifrac_weighted_matrix <- unifrac_weighted_matrix[common_samples, common_samples]
metadata_df <- metadata_df[common_samples, , drop = FALSE]


adonis2_w <- adonis2(
  as.dist(unifrac_weighted_matrix) ~ Smoking_status + combined_condition,
  data = metadata_df,
  permutations = 999
)


print(adonis2_w)
